const out = [],
  settings = {
    width: 32,
    height: 12,
    maxFrames: 500,
    block: {
      size: 15,
      padding: 2,
    },
    speed: 100,
  },
  rnd = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);
let snake = {
    x: rnd(1, settings.width - 1),
    y: rnd(1, settings.height - 1),
    dx: 0,
    dy: 0,
    tail: [],
    cells: 4,
  },
  apple = {
    x: rnd(1, settings.width - 1),
    y: rnd(1, settings.height - 1),
  };

function update() {
  snake = {
    x: rnd(1, settings.width - 1),
    y: rnd(1, settings.height - 1),
    dx: 0,
    dy: 0,
    tail: [],
    cells: 4,
  };
  apple = {
    x: rnd(1, settings.width - 1),
    y: rnd(1, settings.height - 1),
  };
}

function snakeLoop() {
  let frame = [];

  // do(Тупой ИИ)
  const newDY = apple.y != snake.y ? (apple.y > snake.y ? 1 : -1) : 0;
  const newDX =
    apple.x != snake.x && newDY == 0 ? (apple.x > snake.x ? 1 : -1) : 0;

  if (snake.dy != newDY) {
    snake.dy = newDY;
  } else {
    snake.dx = 1;
  }

  if (snake.dx != newDX) {
    snake.dx = newDX;
  } else {
    snake.dy = 1;
  }

  snake.dy = newDY;
  snake.dx = newDX;

  snake.x += snake.dx;
  snake.y += snake.dy;

  if (snake.x < 0) snake.x = settings.width - 1;
  if (snake.x > settings.width - 1) snake.x = 0;

  if (snake.y < 0) snake.y = settings.height - 1;
  if (snake.y > settings.height - 1) snake.y = 0;

  for (let i = 0; i < snake.tail.length; i++) {
    frame.push({ x: snake.tail[i].x, y: snake.tail[i].y, a: 0 });
    if (snake.tail[i].x == snake.x && snake.tail[i].y == snake.y)
      snake.cells = 4; //-1;
  }

  if (snake.cells != -1) {
    snake.tail.push({ x: snake.x, y: snake.y });
    while (snake.tail.length > snake.cells) snake.tail.shift();
  }

  if (apple.x == snake.x && apple.y == snake.y) {
    (apple.x = rnd(1, settings.width - 1)),
      (apple.y = rnd(1, settings.height - 1)),
      snake.cells++;
  }

  frame.push({ x: apple.x, y: apple.y, a: 1 });

  out.push(frame);

  // snake.cells != -1 &&
  if (out.length < settings.maxFrames) {
    return snakeLoop();
  } else {
    return out;
  }
}

const header = `<svg xmlns="http://www.w3.org/2000/svg" width="${
    settings.width * settings.block.size +
    (settings.width * settings.block.padding + settings.block.padding)
  }" height="${
    settings.height * settings.block.size +
    (settings.height * settings.block.padding + settings.block.padding)
  }"
>`,
  footer = `<style xmlns="http://www.w3.org/2000/svg">@keyframes show{0%,to{opacity:1}99%{opacity:1}100%{opacity:0}}@keyframes fin{0%,to{opacity:1}100%{opacity:1}}</style></svg>`,
  creator = `<path d="M 89 36 L 88.4 36 L 88.4 0 L 89 0 L 89 22.6 L 90.15 22.6 Q 90.4 22.6 90.7 22.55 A 0.803 0.803 0 0 0 90.932 22.47 Q 91.125 22.372 91.336 22.164 A 2.736 2.736 0 0 0 91.35 22.15 L 103 11.9 Q 103.25 11.7 103.425 11.6 A 0.671 0.671 0 0 1 103.588 11.535 Q 103.722 11.5 103.9 11.5 L 104.35 11.5 L 91.95 22.35 A 2.217 2.217 0 0 1 91.784 22.501 A 1.735 1.735 0 0 1 91.65 22.6 A 1.37 1.37 0 0 1 91.472 22.701 A 1.126 1.126 0 0 1 91.35 22.75 Q 91.95 22.95 92.4 23.4 L 105.35 36 L 104.9 36 A 1.359 1.359 0 0 1 104.735 35.99 Q 104.634 35.978 104.55 35.95 A 0.528 0.528 0 0 1 104.451 35.904 Q 104.338 35.838 104.2 35.7 L 91.9 23.75 A 4.1 4.1 0 0 0 91.642 23.511 Q 91.377 23.289 91.152 23.195 A 1.078 1.078 0 0 0 91.1 23.175 Q 90.75 23.05 90 23.05 L 89 23.05 L 89 36 Z M 184.55 36 L 184.6 35.4 L 188.45 35.5 A 0.323 0.323 0 0 1 188.539 35.513 Q 188.603 35.532 188.675 35.575 Q 188.747 35.618 188.777 35.669 A 0.155 0.155 0 0 1 188.8 35.75 L 188.8 36 L 184.55 36 L 184.7 36 L 184.7 11.5 L 184.1 11.5 L 184.1 30.15 A 17.429 17.429 0 0 1 182.827 31.795 A 13.833 13.833 0 0 1 179.85 34.375 Q 177.45 35.9 174.55 35.9 Q 170.75 35.9 168.9 33.55 A 7.47 7.47 0 0 1 168.152 32.392 Q 167.541 31.225 167.269 29.755 A 14.038 14.038 0 0 1 167.05 27.2 L 167.05 11.5 L 166.45 11.5 L 166.45 27.2 A 17.924 17.924 0 0 0 166.458 27.745 Q 166.536 30.295 167.35 32.15 A 8.205 8.205 0 0 0 167.422 32.309 A 6.738 6.738 0 0 0 170.05 35.3 A 6.438 6.438 0 0 0 170.473 35.537 Q 172.158 36.4 174.55 36.4 Q 177.45 36.4 179.95 34.875 Q 182.45 33.35 184.1 30.9 L 184.2 35.6 A 0.861 0.861 0 0 0 184.201 35.631 Q 184.211 35.908 184.403 35.977 A 0.436 0.436 0 0 0 184.55 36 Z M 36.65 45 L 36.3 45 L 40.5 35.55 L 29.9 11.5 L 30.25 11.5 A 0.654 0.654 0 0 1 30.389 11.514 Q 30.487 11.535 30.56 11.589 A 0.409 0.409 0 0 1 30.575 11.6 Q 30.7 11.7 30.75 11.85 L 40.5 34.1 A 9.98 9.98 0 0 1 40.648 34.411 A 11.519 11.519 0 0 1 40.7 34.525 Q 40.8 34.75 40.85 35 Q 40.893 34.828 40.936 34.693 A 3.366 3.366 0 0 1 40.95 34.65 L 41.05 34.35 Q 41.088 34.235 41.127 34.15 A 1.283 1.283 0 0 1 41.15 34.1 L 50.9 11.85 Q 50.965 11.719 51.042 11.642 A 0.423 0.423 0 0 1 51.125 11.575 A 0.67 0.67 0 0 1 51.206 11.533 Q 51.249 11.515 51.289 11.507 A 0.303 0.303 0 0 1 51.35 11.5 L 51.7 11.5 L 37.25 44.45 A 0.878 0.878 0 0 1 37.115 44.742 A 1.078 1.078 0 0 1 37.05 44.825 A 0.492 0.492 0 0 1 36.692 44.999 A 0.679 0.679 0 0 1 36.65 45 Z M 122.45 45 L 122.1 45 L 126.3 35.55 L 115.7 11.5 L 116.05 11.5 A 0.654 0.654 0 0 1 116.189 11.514 Q 116.287 11.535 116.36 11.589 A 0.409 0.409 0 0 1 116.375 11.6 Q 116.5 11.7 116.55 11.85 L 126.3 34.1 A 9.98 9.98 0 0 1 126.448 34.411 A 11.519 11.519 0 0 1 126.5 34.525 Q 126.6 34.75 126.65 35 Q 126.693 34.828 126.736 34.693 A 3.366 3.366 0 0 1 126.75 34.65 L 126.85 34.35 Q 126.888 34.235 126.927 34.15 A 1.283 1.283 0 0 1 126.95 34.1 L 136.7 11.85 Q 136.765 11.719 136.842 11.642 A 0.423 0.423 0 0 1 136.925 11.575 A 0.67 0.67 0 0 1 137.006 11.533 Q 137.049 11.515 137.089 11.507 A 0.303 0.303 0 0 1 137.15 11.5 L 137.5 11.5 L 123.05 44.45 A 0.878 0.878 0 0 1 122.915 44.742 A 1.078 1.078 0 0 1 122.85 44.825 A 0.492 0.492 0 0 1 122.492 44.999 A 0.679 0.679 0 0 1 122.45 45 Z M 144.35 34.1 L 144.35 33.2 L 144.9 33.7 A 4.89 4.89 0 0 0 145.375 34.053 Q 145.905 34.405 146.73 34.815 A 24.914 24.914 0 0 0 147.325 35.1 Q 148.81 35.789 150.907 35.885 A 15.196 15.196 0 0 0 151.6 35.9 A 9.734 9.734 0 0 0 153.911 35.64 A 6.751 6.751 0 0 0 157.025 33.975 A 6.298 6.298 0 0 0 159.047 29.399 A 7.888 7.888 0 0 0 159.05 29.2 A 5.427 5.427 0 0 0 158.918 27.967 A 3.698 3.698 0 0 0 158.025 26.25 A 6.545 6.545 0 0 0 156.5 25.051 A 8.557 8.557 0 0 0 155.35 24.5 A 41.585 41.585 0 0 0 152.763 23.581 A 47.219 47.219 0 0 0 151.85 23.3 A 40.179 40.179 0 0 1 148.746 22.242 A 36.401 36.401 0 0 1 148.325 22.075 A 8.679 8.679 0 0 1 146.898 21.349 A 6.522 6.522 0 0 1 145.625 20.3 A 3.672 3.672 0 0 1 144.756 18.662 Q 144.6 18.042 144.6 17.3 Q 144.6 15.55 145.625 14.15 A 7.037 7.037 0 0 1 147.835 12.197 A 8.428 8.428 0 0 1 148.35 11.925 A 8.277 8.277 0 0 1 151.25 11.139 A 10.07 10.07 0 0 1 152.15 11.1 Q 154.2 11.1 155.95 11.65 Q 157.7 12.2 158.6 12.6 L 158.6 13.35 L 158.05 12.95 Q 156.9 12.35 155.15 11.975 Q 153.4 11.6 152.15 11.6 A 8.504 8.504 0 0 0 149.849 11.903 A 7.487 7.487 0 0 0 148.6 12.375 A 7.268 7.268 0 0 0 147.091 13.34 A 6.047 6.047 0 0 0 146.075 14.425 Q 145.15 15.7 145.15 17.3 A 4.694 4.694 0 0 0 145.286 18.461 A 3.254 3.254 0 0 0 146.2 20.05 Q 147.25 21.05 148.9 21.65 Q 150.55 22.25 152.4 22.85 A 39.918 39.918 0 0 1 154.668 23.639 A 33.389 33.389 0 0 1 155.925 24.15 A 8.245 8.245 0 0 1 157.482 25.021 A 6.68 6.68 0 0 1 158.575 26 Q 159.517 27.057 159.593 28.833 A 7.416 7.416 0 0 1 159.6 29.15 A 7.533 7.533 0 0 1 159.247 31.485 A 6.712 6.712 0 0 1 158.6 32.9 Q 157.6 34.55 155.8 35.475 A 8.235 8.235 0 0 1 153.316 36.27 A 10.889 10.889 0 0 1 151.6 36.4 Q 149.579 36.4 148.096 35.949 A 7.313 7.313 0 0 1 147.225 35.625 A 28.542 28.542 0 0 1 146.012 35.047 Q 145.069 34.569 144.35 34.1 Z M 4.1 34.55 L 4.1 0 L 4.7 0 L 4.7 16.55 A 13.414 13.414 0 0 1 7.574 13.383 A 12.417 12.417 0 0 1 8.725 12.575 Q 11.1 11.1 13.8 11.1 A 12.572 12.572 0 0 1 16.231 11.323 Q 17.884 11.648 19.175 12.45 A 7.822 7.822 0 0 1 21.759 15.114 A 10.416 10.416 0 0 1 22.475 16.55 Q 23.6 19.3 23.6 23.6 A 17.815 17.815 0 0 1 23.191 27.487 A 14.92 14.92 0 0 1 22.375 30.05 Q 21.15 32.95 18.775 34.625 A 8.933 8.933 0 0 1 15.372 36.06 A 12.582 12.582 0 0 1 12.85 36.3 A 46.652 46.652 0 0 1 10.678 36.251 A 39.253 39.253 0 0 1 9.45 36.175 A 16.66 16.66 0 0 1 7.737 35.955 A 13.235 13.235 0 0 1 6.525 35.675 Q 5.2 35.3 4.1 34.55 Z M 4.7 17.35 L 4.7 34.35 A 11.607 11.607 0 0 0 8.057 35.46 A 13.081 13.081 0 0 0 8.3 35.5 Q 10.25 35.8 12.85 35.8 Q 16.25 35.8 18.5 34.175 A 9.774 9.774 0 0 0 21.711 30.181 A 11.779 11.779 0 0 0 21.875 29.8 A 15.006 15.006 0 0 0 22.861 25.939 A 19.089 19.089 0 0 0 23 23.6 Q 23 17.694 20.821 14.741 A 7.575 7.575 0 0 0 20.675 14.55 Q 18.35 11.6 13.8 11.6 A 9.073 9.073 0 0 0 9.073 12.94 A 10.915 10.915 0 0 0 8.775 13.125 A 12.689 12.689 0 0 0 5.71 15.924 A 15.697 15.697 0 0 0 4.7 17.35 Z M 76.55 36 L 75.95 36 L 75.95 1 L 76.55 1 L 76.55 36 Z M 144.9 29.55 L 145.05 34.2 L 144.35 33.9 L 144.35 29.2 L 144.65 29.2 Q 144.75 29.2 144.825 29.325 A 0.67 0.67 0 0 1 144.867 29.406 Q 144.885 29.449 144.893 29.489 A 0.303 0.303 0 0 1 144.9 29.55 Z M 158.05 17.3 L 157.9 12.65 L 158.6 12.95 L 158.6 17.65 L 158.3 17.65 Q 158.2 17.65 158.125 17.525 A 0.67 0.67 0 0 1 158.083 17.444 Q 158.065 17.401 158.057 17.361 A 0.303 0.303 0 0 1 158.05 17.3 Z M 0 0 L 4.25 0 L 4.2 0.6 L 0.35 0.5 A 0.323 0.323 0 0 1 0.261 0.487 Q 0.197 0.468 0.125 0.425 Q 0.053 0.382 0.023 0.331 A 0.155 0.155 0 0 1 0 0.25 L 0 0 Z M 71.85 1 L 76.1 1 L 76.05 1.6 L 72.2 1.5 A 0.323 0.323 0 0 1 72.111 1.487 Q 72.047 1.468 71.975 1.425 Q 71.903 1.382 71.873 1.331 A 0.155 0.155 0 0 1 71.85 1.25 L 71.85 1 Z M 84.3 0 L 88.55 0 L 88.5 0.6 L 84.65 0.5 A 0.323 0.323 0 0 1 84.561 0.487 Q 84.497 0.468 84.425 0.425 Q 84.353 0.382 84.323 0.331 A 0.155 0.155 0 0 1 84.3 0.25 L 84.3 0 Z M 93.1 36 L 88.85 36 L 88.9 35.4 L 92.75 35.5 A 0.323 0.323 0 0 1 92.839 35.513 Q 92.903 35.532 92.975 35.575 Q 93.047 35.618 93.077 35.669 A 0.155 0.155 0 0 1 93.1 35.75 L 93.1 36 Z M 80.65 36 L 76.4 36 L 76.45 35.4 L 80.3 35.5 A 0.323 0.323 0 0 1 80.389 35.513 Q 80.453 35.532 80.525 35.575 Q 80.597 35.618 80.627 35.669 A 0.155 0.155 0 0 1 80.65 35.75 L 80.65 36 Z M 105.05 36 L 109.3 36 L 109.3 35.75 A 0.155 0.155 0 0 0 109.277 35.669 Q 109.247 35.618 109.175 35.575 Q 109.103 35.532 109.039 35.513 A 0.323 0.323 0 0 0 108.95 35.5 L 105.1 35.4 L 105.05 36 Z M 47 11.5 L 51.25 11.5 L 51.2 12.1 L 47.35 12 A 0.323 0.323 0 0 1 47.261 11.987 Q 47.197 11.968 47.125 11.925 Q 47.053 11.882 47.023 11.831 A 0.155 0.155 0 0 1 47 11.75 L 47 11.5 Z M 132.8 11.5 L 137.05 11.5 L 137 12.1 L 133.15 12 A 0.323 0.323 0 0 1 133.061 11.987 Q 132.997 11.968 132.925 11.925 Q 132.853 11.882 132.823 11.831 A 0.155 0.155 0 0 1 132.8 11.75 L 132.8 11.5 Z M 26.65 11.5 L 30.9 11.5 L 30.85 12.1 L 27 12 A 0.323 0.323 0 0 1 26.911 11.987 Q 26.847 11.968 26.775 11.925 Q 26.703 11.882 26.673 11.831 A 0.155 0.155 0 0 1 26.65 11.75 L 26.65 11.5 Z M 99.6 11.5 L 103.85 11.5 L 103.8 12.1 L 99.95 12 A 0.323 0.323 0 0 1 99.861 11.987 Q 99.797 11.968 99.725 11.925 Q 99.653 11.882 99.623 11.831 A 0.155 0.155 0 0 1 99.6 11.75 L 99.6 11.5 Z M 112.45 11.5 L 116.7 11.5 L 116.65 12.1 L 112.8 12 A 0.323 0.323 0 0 1 112.711 11.987 Q 112.647 11.968 112.575 11.925 Q 112.503 11.882 112.473 11.831 A 0.155 0.155 0 0 1 112.45 11.75 L 112.45 11.5 Z M 162.35 11.5 L 166.6 11.5 L 166.55 12.1 L 162.7 12 A 0.323 0.323 0 0 1 162.611 11.987 Q 162.547 11.968 162.475 11.925 Q 162.403 11.882 162.373 11.831 A 0.155 0.155 0 0 1 162.35 11.75 L 162.35 11.5 Z M 180 11.5 L 184.25 11.5 L 184.2 12.1 L 180.35 12 A 0.323 0.323 0 0 1 180.261 11.987 Q 180.197 11.968 180.125 11.925 Q 180.053 11.882 180.023 11.831 A 0.155 0.155 0 0 1 180 11.75 L 180 11.5 Z M 76.1 36 L 71.85 36 L 71.85 35.75 Q 71.85 35.65 71.975 35.575 A 0.67 0.67 0 0 1 72.056 35.533 Q 72.099 35.515 72.139 35.507 A 0.303 0.303 0 0 1 72.2 35.5 L 76.05 35.4 L 76.1 36 Z M 76.4 1 L 80.65 1 L 80.65 1.25 Q 80.65 1.35 80.525 1.425 A 0.67 0.67 0 0 1 80.444 1.467 Q 80.401 1.485 80.361 1.493 A 0.303 0.303 0 0 1 80.3 1.5 L 76.45 1.6 L 76.4 1 Z M 88.55 36 L 84.3 36 L 84.3 35.75 Q 84.3 35.65 84.425 35.575 A 0.67 0.67 0 0 1 84.506 35.533 Q 84.549 35.515 84.589 35.507 A 0.303 0.303 0 0 1 84.65 35.5 L 88.5 35.4 L 88.55 36 Z M 103.8 11.5 L 108.05 11.5 L 108.05 11.75 Q 108.05 11.85 107.925 11.925 A 0.67 0.67 0 0 1 107.844 11.967 Q 107.801 11.985 107.761 11.993 A 0.303 0.303 0 0 1 107.7 12 L 103.85 12.1 L 103.8 11.5 Z M 30.4 11.5 L 34.65 11.5 L 34.65 11.75 Q 34.65 11.85 34.525 11.925 A 0.67 0.67 0 0 1 34.444 11.967 Q 34.401 11.985 34.361 11.993 A 0.303 0.303 0 0 1 34.3 12 L 30.45 12.1 L 30.4 11.5 Z M 50.75 11.5 L 55 11.5 L 55 11.75 Q 55 11.85 54.875 11.925 A 0.67 0.67 0 0 1 54.794 11.967 Q 54.751 11.985 54.711 11.993 A 0.303 0.303 0 0 1 54.65 12 L 50.8 12.1 L 50.75 11.5 Z M 116.2 11.5 L 120.45 11.5 L 120.45 11.75 Q 120.45 11.85 120.325 11.925 A 0.67 0.67 0 0 1 120.244 11.967 Q 120.201 11.985 120.161 11.993 A 0.303 0.303 0 0 1 120.1 12 L 116.25 12.1 L 116.2 11.5 Z M 136.55 11.5 L 140.8 11.5 L 140.8 11.75 Q 140.8 11.85 140.675 11.925 A 0.67 0.67 0 0 1 140.594 11.967 Q 140.551 11.985 140.511 11.993 A 0.303 0.303 0 0 1 140.45 12 L 136.6 12.1 L 136.55 11.5 Z M 103.85 12.1 L 102.75 12.15 L 103.2 11.9 L 103.8 11.5 L 105 11.5 L 103.85 12.1 Z M 105.1 35.4 L 105.05 36 L 103.9 35.35 L 105.1 35.4 Z M 51.45 11.9 L 50.65 11.9 L 50.65 11.5 L 51.45 11.5 L 51.45 11.9 Z M 137.25 11.9 L 136.45 11.9 L 136.45 11.5 L 137.25 11.5 L 137.25 11.9 Z M 31.1 11.9 L 30.3 11.9 L 30.3 11.5 L 31.1 11.5 L 31.1 11.9 Z M 116.9 11.9 L 116.1 11.9 L 116.1 11.5 L 116.9 11.5 L 116.9 11.9 Z"`;

function getBlock(x, y, style) {
  const PosX = x * settings.block.size + (x ? x * settings.block.padding : 0),
    PosY = y * settings.block.size + (y ? y * settings.block.padding : 0);
  return `<path d="M ${PosX} ${PosY} H ${settings.block.size + PosX} V ${
    settings.block.size + PosY
  } H ${PosX} Z" style="${style}"/>`;
}

export default {
  async fetch(request, env, ctx) {
    update();
    const table = snakeLoop();
    const data =
      header +
      table
        .map((frame, index) =>
          frame
            .map(({ x, y, a }) =>
              getBlock(
                x,
                y,
                `animation:show ${settings.speed + 50}ms;animation-delay:${
                  settings.speed * index
                }ms;fill:#${a ? "ff0000" : "00ff00"};opacity:0`
              )
            )
            .join("")
        )
        .join("") +
      creator +
      ` style="animation:fin 777s;animation-delay:${
        settings.speed * table.length + settings.speed
      }ms;opacity:0;stroke:#ff0000" />` +
      footer;
    return new Response(data, {
      headers: {
        "Access-Control-Allow-Origin": "*",
        Vary: "Origin",
        "Cache-Control": "max-age=0, no-cache, no-store, must-revalidate",
        "Content-Type": "image/svg+xml",
      },
    });
  },
};
